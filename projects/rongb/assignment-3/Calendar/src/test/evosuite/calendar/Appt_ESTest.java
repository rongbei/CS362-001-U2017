/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 09 02:53:59 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "*+nC!/p$.S0?r>", "E&Rhxl)N=y=");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("\t11/11/11 at 11:11am ,*+nC!/p$.S0?r>, E&Rhxl)N=y=\n", string0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      int[] intArray0 = new int[3];
      appt0.setRecurrence(intArray0, 0, (-1999), 2);
      boolean boolean0 = appt0.isRecurring();
      assertEquals((-1999), appt0.getRecurIncrement());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 1179, 0, 0, "", ":");
      int[] intArray0 = new int[5];
      CalendarUtil.DaysInMonth = intArray0;
      intArray0[0] = 1179;
      appt0.setStartYear(0);
      assertEquals("", appt0.getTitle());
      assertEquals(":", appt0.getDescription());
      assertEquals(1179, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "", "");
      boolean boolean0 = appt0.getValid();
      assertEquals(2, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(boolean0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      int int0 = appt0.getStartYear();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(2237, (-2631), (-1227), 10, 10, "m7N`QFJ,r{_]%wz", "");
      int int0 = appt0.getStartYear();
      assertEquals(10, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-1227), appt0.getStartDay());
      assertEquals(2237, appt0.getStartHour());
      assertEquals((-2631), appt0.getStartMinute());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("m7N`QFJ,r{_]%wz", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6, 6, 6, (String) null, (String) null);
      int int0 = appt0.getStartMonth();
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(6, appt0.getStartDay());
      assertEquals(6, appt0.getStartYear());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt((-842), 0, (-842), 1, (-1), "<L>", " ,");
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals((-842), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals((-842), appt0.getStartHour());
      assertEquals(" ,", appt0.getDescription());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("<L>", appt0.getTitle());
      assertEquals(0, int0);
      assertEquals((-1), appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "=Sd0hFLM'5gLn", "");
      int int0 = appt0.getStartHour();
      assertEquals("=Sd0hFLM'5gLn", appt0.getTitle());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(1086, 1086, 1086, 0, 0, " at ", "6C jd@a`~D\"PZP[q:Nm");
      int int0 = appt0.getStartHour();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1086, int0);
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(" at ", appt0.getTitle());
      assertEquals(1086, appt0.getStartMinute());
      assertEquals(1086, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(1545, 1545, 546, 0, 0, "", "");
      int int0 = appt0.getStartDay();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(1545, appt0.getStartHour());
      assertEquals(546, int0);
      assertEquals(1545, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      int[] intArray0 = new int[3];
      appt0.setRecurrence(intArray0, 0, (-1999), 2);
      int int0 = appt0.getRecurNumber();
      assertEquals(0, appt0.getRecurBy());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      int[] intArray0 = new int[3];
      appt0.setRecurrence(intArray0, (-2408), (-2408), (-1215));
      int int0 = appt0.getRecurNumber();
      assertEquals((-2408), appt0.getRecurIncrement());
      assertEquals((-1215), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "Ja1E*KPEW'X/", (String) null);
      assertEquals(2, appt0.getRecurBy());
      
      appt0.setRecurrence(CalendarUtil.DaysInMonth, 0, 1, 0);
      int int0 = appt0.getRecurIncrement();
      assertEquals(0, appt0.getRecurBy());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      int[] intArray0 = new int[5];
      appt0.setRecurrence(intArray0, (-965), (-2326), (-2228));
      int int0 = appt0.getRecurIncrement();
      assertEquals((-965), appt0.getRecurBy());
      assertEquals((-2326), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      int[] intArray0 = new int[3];
      appt0.setRecurrence(intArray0, 0, (-1999), 2);
      appt0.getRecurDays();
      assertEquals((-1999), appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 100, 0, 0, "", "");
      appt0.setRecurrence((int[]) null, 0, (-2449), (-2449));
      int int0 = appt0.getRecurBy();
      assertEquals((-2449), appt0.getRecurNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      int[] intArray0 = new int[5];
      appt0.setRecurrence(intArray0, (-965), (-2326), (-2228));
      int int0 = appt0.getRecurBy();
      assertEquals((-965), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(1, 60, 60, 1, 0, "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 1, 1, "$ERuP*>[", "$ERuP*>[");
      int[] intArray0 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear((-29));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 100, 0, 0, "", "");
      // Undeclared exception!
      try { 
        appt0.setStartMonth(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(9, 9, 9, 3, 1000, "wau?)uib/gDBU", "wau?)uib/gDBU");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-2548), (String) null, (String) null);
      int[] intArray0 = appt0.getRecurDays();
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      int[] intArray0 = new int[5];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 9, 9, 1, "", "calendar.CalendarUtil");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 1000, 11, 2623, "", "}cb,w6I38EKTj,7R45d");
      int[] intArray0 = new int[5];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt((-2566), (-2566), (-2566), (-2566), (-2566), "", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2566
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt((-60), (-60), (-60), 0, (-60), "Nj~T^W7[Wr#NA/@Gv", "AYv");
      appt0.getTitle();
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-60), appt0.getStartDay());
      assertEquals((-60), appt0.getStartHour());
      assertEquals((-60), appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals((-60), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt((-1875), (-1875), (-1875), 2, 2, "Sh#!@:", "Sh#!@:");
      assertEquals("Sh#!@:", appt0.getDescription());
      
      appt0.setDescription("");
      appt0.getDescription();
      assertEquals(2, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(0, (-522), (-522), 2, 0, (String) null, (String) null);
      appt0.setDescription((String) null);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-522), appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-522), appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      appt0.setTitle((String) null);
      assertEquals((-2408), appt0.getStartYear());
      assertEquals((-1215), appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2444), appt0.getStartHour());
      assertEquals(2, appt0.getStartMonth());
      assertEquals((-1215), appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      appt0.setTitle("\"h\u0002PUz%@;O{$i6");
      assertEquals("\"h\u0002PUz%@;O{$i6", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      int int0 = appt0.getRecurNumber();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2444), appt0.getStartHour());
      assertEquals((-1215), appt0.getStartDay());
      assertEquals((-2408), appt0.getStartYear());
      assertEquals((-1215), appt0.getStartMinute());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      int int0 = appt0.getStartMinute();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertEquals((-1215), int0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals((-2444), appt0.getStartHour());
      assertEquals((-1215), appt0.getStartDay());
      assertEquals((-2408), appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      int int0 = appt0.getStartHour();
      assertEquals((-2444), int0);
      assertEquals((-1215), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertEquals((-1215), appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2408), appt0.getStartYear());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "Ja1E*KPEW'X/", (String) null);
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      int int0 = appt0.getStartYear();
      assertEquals((-1215), appt0.getStartDay());
      assertEquals((-2408), int0);
      assertEquals((-1215), appt0.getStartMinute());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2444), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      boolean boolean0 = appt0.getValid();
      assertFalse(boolean0);
      assertEquals((-2408), appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1215), appt0.getStartMinute());
      assertEquals(2, appt0.getStartMonth());
      assertEquals((-1215), appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2444), appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      appt0.getTitle();
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1215), appt0.getStartMinute());
      assertEquals((-2444), appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-1215), appt0.getStartDay());
      assertEquals(2, appt0.getStartMonth());
      assertEquals((-2408), appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt(60, 0, (-3797), 0, (-3797), "}3uAk;$oY`D", "\"zXH`a1b=zPe&2.");
      String string0 = appt0.getDescription();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(60, appt0.getStartHour());
      assertEquals((-3797), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("}3uAk;$oY`D", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-3797), appt0.getStartDay());
      assertEquals("\"zXH`a1b=zPe&2.", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(60, 0, (-3797), 0, (-3797), "}3uAk;$oY`D", "\"zXH`a1b=zPe&2.");
      int int0 = appt0.getStartDay();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\"zXH`a1b=zPe&2.", appt0.getDescription());
      assertEquals((-3797), int0);
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-3797), appt0.getStartYear());
      assertEquals(60, appt0.getStartHour());
      assertEquals(0, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 6, 6, 6, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("\t6/6/6 at 12:0am ,, \n", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, 24, 1, 1, "\t", "\t");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals("\t1/24/1 at 12:24pm ,\t, \t\n", string0);
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 12, 1, 1, "$ERuP*>[", "$ERuP*>[");
      String string0 = appt0.toString();
      assertNotNull(string0);
      assertEquals("\t1/12/1 at 12:12pm ,$ERuP*>[, $ERuP*>[\n", string0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt(2, 3, 3, 0, (-612), "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, (String) null);
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, (-2887), 0, (-2887));
      boolean boolean0 = appt0.isRecurring();
      assertEquals((-2887), appt0.getRecurBy());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(738, 9, 9, 0, 9, "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-775));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 1179, 0, 0, "", ":");
      appt0.setStartMinute(1179);
      int int0 = appt0.getStartMinute();
      assertEquals(1179, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt((-2444), (-1215), (-1215), 2, (-2408), (String) null, (String) null);
      appt0.setStartMonth(0);
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      int int0 = appt0.getRecurBy();
      assertEquals(7, appt0.getStartMonth());
      assertEquals(7, appt0.getStartHour());
      assertEquals((-1570), appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, int0);
      assertEquals((-965), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 9, 9, 1, "", "calendar.CalendarUtil");
      assertEquals(9, appt0.getStartDay());
      
      appt0.setStartDay(2);
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      assertEquals(7, appt0.getStartHour());
      
      appt0.setStartHour(0);
      assertEquals((-1570), appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      int int0 = appt0.getRecurIncrement();
      assertEquals((-965), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, int0);
      assertEquals((-1570), appt0.getStartDay());
      assertEquals(7, appt0.getStartHour());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertNull(string0);
      assertEquals((-965), appt0.getStartMinute());
      assertEquals(7, appt0.getStartHour());
      assertEquals((-1570), appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(7, (-965), (-1570), 7, 0, (String) null, (String) null);
      boolean boolean0 = appt0.isRecurring();
      assertEquals((-1570), appt0.getStartDay());
      assertEquals(7, appt0.getStartHour());
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartYear());
      assertEquals((-965), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartMonth());
      assertFalse(appt0.getValid());
  }
}
