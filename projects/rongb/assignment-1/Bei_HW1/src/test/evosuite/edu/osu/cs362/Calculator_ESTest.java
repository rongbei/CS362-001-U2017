/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 03 05:41:34 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Calculator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.reduction2(3);
      assertEquals((-1), calculator0.getResult());
      
      calculator0.division2(3);
      assertEquals(0, calculator0.getResult());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.add1(1.0, (-112.0));
      assertEquals((-111.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.reduction1((-34.364), (-1136.1580138886852));
      assertEquals(1101.7940138886852, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.reduction1(524.617429356621, 3172.119105);
      assertEquals((-2647.5016756433793), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.multiply1(2260.327451467784, 2260.327451467784);
      assertEquals(5109080.187858848, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.multiply1((-1.0), 3);
      assertEquals((-3.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.setY((-1.0));
      double double0 = calculator0.getY();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.setX(2260.327451467784);
      double double0 = calculator0.getX();
      assertEquals(2260.327451467784, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.setX((-41.91440220949788));
      double double0 = calculator0.getX();
      assertEquals((-41.91440220949788), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.reduction2(823);
      int int0 = calculator0.getResult();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.division1(0.0, 981.072704);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.division1((-41.91440220949788), (-41.91440220949788));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.add1(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      // Undeclared exception!
      try { 
        calculator0.division2(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("edu.osu.cs362.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.square();
      assertEquals(230, calculator0.getResult());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      // Undeclared exception!
      calculator0.squareRoot(272);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.setY(1.0);
      double double0 = calculator0.getY();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.multiply2(2168);
      assertEquals(0, calculator0.getResult());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Calculator.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.multiply1(0.0, (-1.0));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.clear();
      assertEquals(0, calculator0.getResult());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.division1(1442.118, (-1332.30226751183));
      assertEquals((-1.0824255389831758), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.add1(266.554103, 266.554103);
      assertEquals(533.108206, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.reduction1(1.0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      calculator0.add2(7);
      int int0 = calculator0.getResult();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      double double0 = calculator0.getX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      int int0 = calculator0.getResult();
      assertEquals(0, int0);
  }
}
